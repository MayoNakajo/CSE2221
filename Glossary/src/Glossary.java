import java.util.Comparator;

import components.map.Map;
import components.map.Map1L;
import components.queue.Queue;
import components.queue.Queue1L;
import components.set.Set;
import components.set.Set1L;
import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;

/**
 * Program that creates a glossary HTML page from given text file of terms and
 * definitions.
 *
 * @author Mayo Nakajo
 */
public final class Glossary {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private Glossary() {

    }

    /**
     * Compare {@code String}s in lexicographic order.
     */
    private static class StringLT implements Comparator<String> {
        @Override
        public int compare(String o1, String o2) {
            return o1.compareTo(o2);
        }
    }

    /**
     * Generates the set of characters in the given {@code String} into the
     * given {@code Set}.
     *
     * @param str
     *            the given {@code String}
     * @param charSet
     *            the {@code Set} to be replaced
     * @replaces charSet
     * @ensures charSet = entries(str)
     */
    public static void generateElements(String str, Set<Character> charSet) {
        assert str != null : "Violation of: str is not null";
        assert charSet != null : "Violation of: charSet is not null";

        for (int i = 0; i < str.length(); i++) {
            char c = str.charAt(i);
            // add if c is not already in set
            if (!charSet.contains(c)) {
                charSet.add(c);
            }
        }

    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * the channel element XMLTree
     *
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    public static void outputHeader(SimpleWriter out) {
        // HTML header
        out.println("<html>");
        out.println("<head>");
        out.println("<body>");
        out.println("<h1></h1>");
        out.println("<style>");
        out.println("body {font-family: Georgia; }");
        out.println(".header {");
        out.println("padding: 60px;");
        out.println("text-align: center;");
        out.println("background: #1abc9c;");
        out.println("color: white;");
        out.println("font-size: 30px;");
        out.println("</style>");
        out.println("</head>");
        out.println("<body>");
        out.println("<div class=\"header\">");
        out.println("<h1>Glossary</h1>");
        out.println("</div>");
        out.println("<div class =\"body\">");
        out.println("<h1>Index</h1>");

    }

    /**
     * Returns the first "word" (maximal length string of characters not in
     * {@code separators}) or "separator string" (maximal length string of
     * characters in {@code separators}) in the given {@code text} starting at
     * the given {@code position}.
     *
     * @param text
     *            the {@code String} from which to get the word or separator
     *            string
     * @param position
     *            the starting index
     * @param separators
     *            the {@code Set} of separator characters
     * @return the first word or separator string found in {@code text} starting
     *         at index {@code position}
     * @requires 0 <= position < |text|
     * @ensures <pre>
     * nextWordOrSeparator =
     *   text[position, position + |nextWordOrSeparator|)  and
     * if entries(text[position, position + 1)) intersection separators = {}
     * then
     *   entries(nextWordOrSeparator) intersection separators = {}  and
     *   (position + |nextWordOrSeparator| = |text|  or
     *    entries(text[position, position + |nextWordOrSeparator| + 1))
     *      intersection separators /= {})
     * else
     *   entries(nextWordOrSeparator) is subset of separators  and
     *   (position + |nextWordOrSeparator| = |text|  or
     *    entries(text[position, position + |nextWordOrSeparator| + 1))
     *      is not subset of separators)
     * </pre>
     */
    public static String nextWordOrSeparator(String text, int position,
            Set<Character> separators) {
        assert text != null : "Violation of: text is not null";
        assert separators != null : "Violation of: separators is not null";
        assert 0 <= position : "Violation of: 0 <= position";
        assert position < text.length() : "Violation of: position < |text|";

        String result = "";
        boolean stop = false;
        char c;
        for (int i = position; i < text.length() && !stop; i++) {
            c = text.charAt(i);
            // if c is not in Set separator
            if (!separators.contains(c)) {
                result += c;
            } else {
                // if result is not empty
                if (!result.isEmpty()) {
                    // stop iterating
                    stop = true;
                } else {
                    // add char c to result and stop iterating
                    result += c;
                    stop = true;
                }
            }

        }

        return result;
    }

    /**
     * Creates a map with the term as the key and definition as the value.
     *
     * @param out
     *            the output stream
     * @param fileIn
     *            the input stream
     * @return a Map<String, String> of terms and definitions from input stream
     * @ensures glossary = map of all terms and definitions
     */
    public static Map<String, String> wordsAndDefinitions(SimpleWriter out,
            SimpleReader fileIn) {
        // map of the words and definition
        Map<String, String> glossary = new Map1L<>();
        String def = "";
        String word = "";
        String secondLineDef = "";
        // continue iterating until fileIn reaches end of stream
        while (!fileIn.atEOS()) {
            word = fileIn.nextLine();
            // definition comes after line after the word
            def = fileIn.nextLine();
            // if the definition is on two lines
            secondLineDef = fileIn.nextLine();
            def += " " + secondLineDef;
            // if secondLineDef had text or was an empty line
            if (!secondLineDef.isEmpty()) {
                def += " " + secondLineDef;
                String nextLineDef = fileIn.nextLine();
                // add to current definition
                def += nextLineDef;
            }
            // add word and def in glossary map
            glossary.add(word, def);

        }

        return glossary;

    }

    /**
     * Alphabetizes Map<String, String> wordMap and creates a Queue<String>.
     *
     * @param wordMap
     *            the Map containing all terms and definitions
     * @restore wordMap
     * @return Queue of all key values in wordMap in alphabetical order
     * @ensures q = entries(Map) in alphabetical order
     */
    public static Queue<String> alphabetical(Map<String, String> wordMap) {
        int size = wordMap.size();
        Map<String, String> temp = new Map1L<>();
        Queue<String> q = new Queue1L<>();

        // copy all elements from wordMap to temp
        temp.transferFrom(wordMap);
        for (int i = 0; i < size; i++) {
            // get a pair from the map
            Map.Pair<String, String> pair = temp.removeAny();
            String str = pair.key();
            // add only the key to the Queue
            q.enqueue(str);
            // restore wordMap
            wordMap.add(pair.key(), pair.value());
        }
        // comparator, alphabetically sort q
        Comparator<String> cs = new StringLT();
        q.sort(cs);
        return q;

    }

    /**
     * Generates an HTML page for the term.
     *
     * @param term
     *            the word created HTML page
     * @param map
     *            map containing terms and definitions
     * @param folder
     *            the location of where to save the HTML page
     * @param separatorSet
     *            set containing all separator characters
     *
     * @ensures wordPage = term in red italics, definition displayed with link
     *          to other HTML page if definition contains another term in map,
     *          return to index with index hyper linked back to index page
     */
    public static void wordPage(String term, Map<String, String> map,
            String folder, Set<Character> separatorSet) {
        String def = "";
        String newDef = "";

        // check if the map contains the key, the value is the definiton(def)
        if (map.hasKey(term)) {
            def = map.value(term);
        }

        int position = 0;
        while (position < def.length()) {
            String token = nextWordOrSeparator(def, position, separatorSet);
            // if token is not in separatorSet, i.e. it is a word
            if (!separatorSet.contains(token.charAt(0))) {
                // if the token is in the map, hyperlink it to the HTML page of
                // that specific token
                if (map.hasKey(token)) {
                    newDef += "<a href=\"" + token + ".html\">" + token
                            + "</a>";

                } else {
                    // add regular words
                    newDef += token;
                }
            } else {
                // add separators
                newDef += token;
            }
            position += token.length();
        }
        // output to folder/(term).html
        SimpleWriter fileout = new SimpleWriter1L(
                folder + "/" + term + ".html");
        fileout.println("<html><head><title>Glossary</title></head>");
        fileout.println("<body>");
        fileout.println("<div>");
        fileout.println("<h1 style=\"color : red\"><em>" + term
                + "</em></h1>\r\n" + "</div><div class =\"body\">");
        // next word or sep , link
        fileout.println("<p>" + newDef + " </p>");
        fileout.println("<hr>");
        // linking index page to the word index
        fileout.println(
                "<p>Return to <a href=" + "\"" + "index.html\">index</a>.</p>");
        fileout.println("</div></body></html>");
        fileout.close();

    }

    /**
     * Generates an HTML page for the index page.
     *
     * @param q
     *            Queue of all terms sorted alphabetically
     * @param out
     *            the output stream
     * @param m
     *            the map containing all terms and definitions
     *
     * @ensures mainPage = index with all terms hyper linked in alphabetical
     *          order
     */
    public static void mainPage(Queue<String> q, SimpleWriter out,
            Map<String, String> m) {
        Queue<String> temp = q.newInstance();
        // print out header
        outputHeader(out);
        out.println("<p>");
        out.println("<ul>");
        int length = q.length();
        for (int i = 0; i < length; i++) {
            // remove entry at front of q
            String term = q.dequeue();
            // link the term to its own HTML page
            out.println(
                    "<li><a href=\"" + term + ".html\">" + term + "</a></li>");
            // add term to end of temp
            temp.enqueue(term);
        }
        // restore q
        q.transferFrom(temp);
        out.println("</ul></p>");
        out.println("</div></body></html>");
    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        out.print("Enter text file: ");
        String file = in.nextLine();
        // read in from file
        SimpleReader fileIn = new SimpleReader1L(file);

        out.print("enter folder name: ");
        String folder = in.nextLine();
        // output to folder/index.html
        SimpleWriter fileout = new SimpleWriter1L(folder + "/index.html");

        // create separator Set
        Set<Character> separatorSet = new Set1L<>();
        final String separatorStr = " \t, ";
        generateElements(separatorStr, separatorSet);

        // create map of terms and definitions
        Map<String, String> wordMap = wordsAndDefinitions(out, fileIn);
        // create q of terms in alphabetical order
        Queue<String> q = alphabetical(wordMap);

        // create an HTML for each term in q
        for (String term : q) {
            wordPage(term, wordMap, folder, separatorSet);
        }

        // create index HTML page
        mainPage(q, fileout, wordMap);

        //close input/output streams
        in.close();
        out.close();
    }

}
