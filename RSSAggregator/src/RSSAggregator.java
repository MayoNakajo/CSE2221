import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to convert an XML RSS (version 2.0) feed from a given URL into the
 * corresponding HTML output file.
 *
 * @author Mayo Nakajo
 *
 */
public final class RSSAggregator {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSAggregator() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the channel tag title as the page title</title>
     * </head> <body>
     * <h1>the page title inside a link to the <channel> link</h1>
     * <p>
     * the channel description
     * </p>
     * <table border="1">
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel") : ""
                + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";
        //gets the index of the title and link tag
        int titleNum = getChildElement(channel, "title");
        int linkNum = getChildElement(channel, "link");

        out.println("<html>");
        out.println("<head>");
        String titleChild = "";
        //if title has a child, titleChild assigned to the child of title
        if (channel.child(titleNum).numberOfChildren() > 0) {
            titleChild = channel.child(titleNum).child(0).label();
        } else {
            titleChild = "No title available";
        }
        //RSS always has a link tag that has a child
        String link = channel.child(linkNum).child(0).label();
        out.print("<title>" + titleChild + "</title>");
        out.print("</head> <body>");
        out.print("<h1>");
        //prints header with link to the child of the link tag
        String header = "<a href=\"" + link + "\">" + titleChild + "</a></h1>";
        out.println(header);
        //index of description tag, RSS always has a description tag
        int descripNum = getChildElement(channel, "description");

        //check if description tag has a child and assign to descripLabel
        if (channel.child(descripNum).numberOfChildren() > 0) {
            String descripLabel = channel.child(descripNum).child(0).label();
            out.println("<p>" + descripLabel + "</p>");
        } else {
            out.println("<p>No description</p>");
        }

        out.println("<table border=\"1\">");
        out.println("<tr>");
        out.println("<th>Date</th>");
        out.println("<th>Source</th>");
        out.println("<th>News</th>");
        out.println("</tr>");
        //iterates through all of channel's children to see if its an item tag
        //calls processItem method if it is
        for (int i = 0; i < channel.numberOfChildren(); i++) {
            if (channel.child(i).label().equals("item")) {
                XMLTree item = channel.child(i);
                processItem(item, out);

            }
        }
    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * </table>
     * </body> </html>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";
        // closing tags
        out.println("</table>");
        out.println("</body></html>");
    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";
        // number of children of the given XML tree
        int children = xml.numberOfChildren();
        int idx = -1;
        boolean hasTag = false;
        // finds the index of the tag if it matches the String tag
        while (!hasTag) {
            for (int i = 0; i < children; i++) {
                if (xml.child(i).label().equals(tag)) {
                    idx = i;
                    hasTag = true;
                }
            }
        }
        return idx;
    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the label of the root of item is an <item> tag] and
     *           out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item") : ""
                + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println("<tr>");
        // calling each method that finds the required informtaion for the Data, Source, and News columns
        String date = dateItem(item, "pubDate");
        String source = sourceItem(item, "source");
        String news = newsItem(item, "link", "description", "title");
        // prints the info for Data, Source, and News
        out.println(date);
        out.println(source);
        out.println(news);
        out.println("</tr>");

    }

    /**
     *
     * @param item
     *            XMLTree child of channel
     * @param tag
     *            string for tag name pubDate
     * @return dateLabel the contents under date in the table
     * @requires [the label of the root of item is an <item> tag] and String tag
     *           is "pubDate"
     * @ensures dateLabel is the label of child of pubDate tag
     */
    private static String dateItem(XMLTree item, String tag) {
        // default dateLabel
        String dateLabel = "No date available";
        // gets index of the pubDate tag if it exists
        int idx = getChildElement(item, tag);
        // if it exists, it always has a child
        if (idx != -1) {
            dateLabel = "<td>" + item.child(idx).child(0).label() + "</td>";
        }

        return dateLabel;
    }

    /**
     *
     * @param item
     *            XMLTree child of channel
     * @param tag
     *            String for source
     * @return sourceLabel the contents under source in the table
     * @requires [the label of the root of item is an <item> tag] and String tag
     *           is "source"
     * @ensures sourceLabel is a link with the url attribute displayed by source
     *          child's label
     */
    private static String sourceItem(XMLTree item, String tag) {
        // default sourceLabel
        String sourceLabel = "No source available";
        // gets index of source tag
        int idx = getChildElement(item, tag);
        // if tag exists
        if (idx != -1) {
            // if tag has a child
            if (item.child(idx).numberOfChildren() > 0) {
                // sourceLink is the attribute of the source tag
                // sourceChild is the label of the child of source tag
                String sourceLink = item.child(idx).attributeValue("url");
                String sourceChild = item.child(idx).child(0).label();
                // make it a link that has the sourceChild as the words to the link
                sourceLabel = "<td><a href=\"" + sourceLink + "\">"
                        + sourceChild + "</a></td>";
            }
        } else {
            sourceLabel = "<td>No source available</td>";
        }
        return sourceLabel;
    }

    /**
     *
     * @param item
     *            XMLTree child of channel
     * @param tag1
     *            string tag name for link
     * @param tag2
     *            string tag name for description
     * @param tag3
     *            string tag name for title
     * @return newsLabel the contents under news in the table
     * @requires [the label of the root of item is an <item> tag] and String
     *           tag1 is "link", tag2 is "description", tag3 is "title"
     * @ensures dateLabel is the label of child of pubDate tag
     */
    private static String newsItem(XMLTree item, String tag1, String tag2,
            String tag3) {

        // finds index of link tag
        int idxLink = getChildElement(item, tag1);
        // finds index of description tag
        int idxDe = getChildElement(item, tag2);
        // finds index of title tag
        int idxTitle = getChildElement(item, tag3);
        // default linkChild
        String linkChild = "";
        // default deChild
        String deChild = "No title available";
        // if the link tag exists, it always has a child
        // child of link tag is the url
        if (idxLink != -1) {
            linkChild = item.child(idxLink).child(0).label();
        }
        // if title tag exists
        if (idxTitle != -1) {
            // if title has a child, child is deChild
            if (item.child(idxTitle).numberOfChildren() > 0) {
                deChild = item.child(idxTitle).child(0).label();
            }
        } // if title tag does not exist, description tag must exist
          // if description tag has a child, the child label assigned to deChild
        else if (item.child(idxDe).numberOfChildren() > 0) {
            deChild = item.child(idxDe).child(0).label();

        }
        // link to website with url from child of link and words displayed as child
        // of title tag or description tag
        String newsLabel = "<td><a href=\"" + linkChild + "\">" + deChild
                + "</a></td>";

        return newsLabel;
    }

    /**
     * Processes one XML RSS (version 2.0) feed from a given URL converting it
     * into the corresponding HTML output file.
     *
     * @param url
     *            the URL of the RSS feed
     * @param file
     *            the name of the HTML output file
     * @param out
     *            the output stream to report progress or errors
     * @updates out.content
     * @requires out.is_open
     * @ensures <pre>
     * [reads RSS feed from url, saves HTML document with table of news items
     *   to file, appends to out.content any needed messages]
     * </pre>
     */
    private static void processFeed(String url, String file, SimpleWriter out) {
        XMLTree childxml = new XMLTree1(url);
        // checks if url is an RSS 2.0 tree
        if (!childxml.label().equals("rss")
                && !childxml.attributeValue("version").equals("2.0")) {
            out.print("Invalid RSS URL.");
        } else {
            // channel tag is always index 0 of RSS tag
            XMLTree channel = childxml.child(0);
            // print header to file
            outputHeader(channel, out);
            // print footer to file
            outputFooter(out);
        }
    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        out.print("Enter the URL of a feeds file: ");
        String url = in.nextLine();
        XMLTree xml = new XMLTree1(url);
        out.print("enter HTML name: ");
        String html = in.nextLine();
        SimpleWriter fileout = new SimpleWriter1L(html);
        // title of user entered XML, header of html
        String webTitle = xml.attributeValue("title");

        fileout.println("<html><head><body><h1>" + webTitle + "</h1>");
        fileout.println("<ul>");
        // check to see if entered xml is a feeds file, can assume children have feed tag
        if (xml.label().equals("feeds")) {
            // creating an html for each RSS in the given XML
            for (int i = 0; i < xml.numberOfChildren(); i++) {
                String feedURL = xml.child(i).attributeValue("url");
                String feedname = xml.child(i).attributeValue("name");
                String file = xml.child(i).attributeValue("file");
                // writing to given html file
                SimpleWriter fOut = new SimpleWriter1L(file);
                processFeed(feedURL, file, fOut);
                // printing out the unordered list of html pages
                fileout.println(
                        "<li><a href = \"" + file + "\">" + feedname + "</a>");
            }
            fileout.println("</ul></body></head></html>");
        } else {
            out.println("Not a feeds file.");
        }
        fileout.close();
        in.close();
        out.close();
    }

}